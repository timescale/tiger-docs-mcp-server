import 'dotenv/config';
import { Client } from 'pg';

const schema = process.env.DB_SCHEMA || 'docs';

export const description = 'Create tiger blog tables';

export async function up() {
  const client = new Client();

  try {
    await client.connect();
    await client.query('BEGIN');
    await client.query(/* sql */ `
      CREATE TABLE ${schema}.tiger_blog_pages (
        id int4 PRIMARY KEY generated by default as identity
        , url TEXT UNIQUE NOT NULL
        , title TEXT NOT NULL
        , slug TEXT UNIQUE NOT NULL
        , published_at TIMESTAMP
        , updated_at TIMESTAMP
        , excerpt TEXT
        , tags TEXT[] DEFAULT '{}'
        , authors TEXT[] DEFAULT '{}'
        , content_length INTEGER
        , scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        , chunking_method TEXT DEFAULT 'semantic'
        , chunks_count INTEGER DEFAULT 0
        , post_id TEXT
      );

      CREATE TABLE IF NOT EXISTS ${schema}.tiger_blog_chunks (
        id TEXT PRIMARY KEY
        , page_id INTEGER REFERENCES ${schema}.tiger_blog_pages(id) ON DELETE CASCADE
        , chunk_index INTEGER NOT NULL
        , content TEXT NOT NULL
        , metadata JSONB
        , embedding vector(1536)
        , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      -- Create indexes for efficient search
      CREATE INDEX IF NOT EXISTS tiger_blog_chunks_embedding_idx
      ON ${schema}.tiger_blog_chunks USING hnsw (embedding vector_cosine_ops)
      WITH (m = 16, ef_construction = 64);

      CREATE INDEX IF NOT EXISTS tiger_blog_pages_published_at_idx
      ON ${schema}.tiger_blog_pages (published_at);

      CREATE INDEX IF NOT EXISTS tiger_blog_pages_tags_idx
      ON ${schema}.tiger_blog_pages USING gin (tags);

      CREATE INDEX IF NOT EXISTS tiger_blog_chunks_page_id_idx
      ON ${schema}.tiger_blog_chunks (page_id);
    `);

    await client.query('COMMIT');
  } catch (e) {
    await client.query('ROLLBACK');
    throw e;
  } finally {
    await client.end();
  }
}

export async function down() {
  const client = new Client();

  try {
    await client.connect();
    await client.query(/* sql */ `
      DROP TABLE IF EXISTS ${schema}.tiger_blog_chunks;
      DROP TABLE IF EXISTS ${schema}.tiger_blog_pages;
    `);
  } finally {
    await client.end();
  }
}