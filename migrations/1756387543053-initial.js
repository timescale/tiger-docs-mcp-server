import 'dotenv/config';
import { Client } from 'pg';

const schema = process.env.DB_SCHEMA || 'docs';

export const description = 'Create schema and docs tables';

export async function up() {
  const client = new Client();

  try {
    await client.connect();
    await client.query('BEGIN');
    await client.query(/* sql */ `
      CREATE EXTENSION IF NOT EXISTS vector;

      CREATE TABLE ${schema}.postgres_pages (
        id int4 PRIMARY KEY generated by default as identity
        , version int2 NOT NULL
        , url TEXT UNIQUE NOT NULL
        , domain TEXT NOT NULL
        , filename TEXT NOT NULL
        , content_length INTEGER
        , scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        , chunking_method TEXT DEFAULT 'header'
        , chunks_count INTEGER DEFAULT 0
      );

      CREATE TABLE IF NOT EXISTS ${schema}.postgres_chunks (
        id int4 PRIMARY KEY generated by default as identity
        , page_id INTEGER REFERENCES ${schema}.postgres_pages(id) ON DELETE CASCADE
        , chunk_index INTEGER NOT NULL
        , sub_chunk_index INTEGER NOT NULL DEFAULT 0
        , content TEXT NOT NULL
        , metadata JSONB
        , embedding vector(1536)
        , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE ${schema}.timescale_pages (
        id int4 PRIMARY KEY generated by default as identity
        , url TEXT UNIQUE NOT NULL
        , domain TEXT NOT NULL
        , filename TEXT NOT NULL
        , content_length INTEGER
        , scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        , chunking_method TEXT DEFAULT 'header'
        , chunks_count INTEGER DEFAULT 0
      );

      CREATE TABLE IF NOT EXISTS ${schema}.timescale_chunks (
        id int4 PRIMARY KEY generated by default as identity
        , page_id INTEGER REFERENCES ${schema}.timescale_pages(id) ON DELETE CASCADE
        , chunk_index INTEGER NOT NULL
        , sub_chunk_index INTEGER NOT NULL DEFAULT 0
        , content TEXT NOT NULL
        , metadata JSONB
        , embedding vector(1536)
        , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    await client.query('COMMIT');
  } catch (e) {
    await client.query('ROLLBACK');
    throw e;
  } finally {
    await client.end();
  }
}

export async function down() {
  const client = new Client();

  try {
    await client.connect();
    await client.query(/* sql */ `
      DROP TABLE IF EXISTS ${schema}.timescale_chunks;
      DROP TABLE IF EXISTS ${schema}.timescale_pages;
      DROP TABLE IF EXISTS ${schema}.postgres_chunks;
      DROP TABLE IF EXISTS ${schema}.postgres_pages;
    `);
  } finally {
    await client.end();
  }
}
